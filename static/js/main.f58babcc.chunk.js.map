{"version":3,"sources":["colors.tsx","components/Header.tsx","components/Sidebar.tsx","components/ColumnChooser.tsx","components/charts/AreaChart.tsx","components/charts/PieChart.tsx","components/charts/Table.tsx","components/charts/Charts.tsx","App.tsx","data/CSVdata.tsx","reportWebVitals.ts","index.tsx"],"names":["COLORS","StyledHeader","styled","div","white","borderGrey","StyledHeaderElement","StyledTitle","StyledParNameWrapper","StyledLogout","StyledPartName","props","current","Header","part","setPart","onClick","PartEnum","CHARTS","TABLE","StyledSidebar","StyledSiteName","Sidebar","site","setSite","SiteEnum","A","B","StyledColumnChooser","StyledSelectWrapper","label","StyledSelect","select","StyledResetButtonWrapper","StyledResetButton","button","teal","ColumnChooser","columnToShow","setColumnToShow","columnNames","style","fontSize","fontWeight","textAlign","paddingBottom","paddingRight","value","onChange","e","target","map","name","index","StyledChartWrapper","AreaChartComponent","data","ResponsiveContainer","width","height","AreaChart","margin","top","right","bottom","left","border","id","x1","y1","x2","y2","offset","stopColor","blue","stopOpacity","Area","type","dataKey","stroke","fillOpacity","fill","CartesianGrid","XAxis","YAxis","Tooltip","PieChartComponent","pieChartColors","red","green","darkPurple","PieChart","Pie","nameKey","cx","cy","innerRadius","outerRadius","entry","Cell","Legend","align","iconType","layout","verticalAlign","StyledTableWrapper","Table","columns","tableRef","useRef","useEffect","scrollIntoView","behavior","ref","options","rowStyle","search","showTitle","toolbar","headerStyle","backgroundColor","lightestBackgroundGrey","StyledCharts","StyledChartAndTitleWrapper","StyledChartTitle","p","StyledTwoChartsWrapper","Charts","setColumnNames","useState","setData","CSVdata","setCSVData","tableColumns","setTableColumns","allChartsData","setAllChartsData","Papa","parse","header","element","title","field","convertedData","chartData","columnName","Object","keys","forEach","key","push","Number","replace","convertToChartData","chartTitle","chart","ALL_COLUMNS","StyledApp","window","innerHeight","StyledSidebarAndContentWrapper","StyledContentWrapper","App","handleScroll","pageYOffset","addEventListener","removeEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f58babcc.chunk.js","sourcesContent":["enum COLORS {\n  white = \"#ffffff\",\n  green = \"#5EE2A0\",\n  blue = \"#54D8FF\",\n  blue2 = \"#55D8FE\",\n  teal = \"#50B4C8\",\n  red = \"#FD8373\",\n  darkPurple = \"#43425D\",\n  textGrey = \"#2f2f2f\",\n  borderGrey = \"#dedede\",\n  lightBackgroundGrey = \"#EDEDED\",\n  lighterBackgroundGrey = \"#F5F5F5\",\n  lightestBackgroundGrey = \"#F9FAFB\",\n  darkGrey = \"#BCBCBC\",\n}\n\nexport default COLORS;\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport styled from \"styled-components\";\nimport { PartEnum } from \"../App\";\nimport COLORS from \"../colors\";\n\ninterface HeaderProps {\n  part: PartEnum;\n  setPart: Dispatch<SetStateAction<PartEnum>>;\n}\n\nconst StyledHeader = styled.div`\n  background-color: ${COLORS.white};\n  top: 0;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  color: #767676;\n  height: 50px;\n  border-bottom: solid 1px ${COLORS.borderGrey};\n  @media only screen and (max-width: 700px) {\n    flex-wrap: wrap;\n    height: 70px;\n  }\n`;\nconst StyledHeaderElement = styled.div`\n  width: 30%;\n  height: 50px;\n  line-height: 50px;\n  @media only screen and (max-width: 700px) {\n    height: 30px;\n    line-height: 30px;\n  }\n`;\nconst StyledTitle = styled(StyledHeaderElement)`\n  width: 30%;\n  padding-left: 5%;\n  font-size: 18px;\n  order: 1;\n  @media only screen and (max-width: 800px) {\n    font-size: 16px;\n  }\n  @media only screen and (max-width: 700px) {\n    width: 50%;\n    font-size: 10px;\n  }\n`;\nconst StyledParNameWrapper = styled(StyledHeaderElement)`\n  flex-grow: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  order: 2;\n  @media only screen and (max-width: 700px) {\n    width: 100%;\n    order: 3;\n    margin-top: 10px;\n    border-bottom: solid 1px #dedede;\n  }\n`;\nconst StyledLogout = styled(StyledHeaderElement)`\n  width: 30%;\n  text-align: right;\n  padding-right: 20px;\n  font-size: 16px;\n  order: 3;\n  cursor: pointer;\n  @media only screen and (max-width: 700px) {\n    width: 20%;\n    font-size: 13px;\n    order: 2;\n  }\n`;\ninterface PartNameProps {\n  current: boolean;\n}\nconst StyledPartName = styled.div`\n  border-bottom: ${(props: PartNameProps) =>\n    props.current && \"2px solid #50B4C8\"};\n  cursor: ${(props: PartNameProps) => !props.current && \"pointer\"};\n  color: ${(props: PartNameProps) => props.current && \"#2f2f2f\"};\n  margin-right: 30px;\n  padding-right: 10px;\n  margin-left: 30px;\n  padding-left: 10px;\n  height: 100%;\n`;\n\nconst Header = (props: HeaderProps) => {\n  const { part, setPart } = props;\n\n  return (\n    <StyledHeader>\n      <StyledTitle>Zadanie rekrutacyjne React</StyledTitle>\n      <StyledParNameWrapper>\n        <StyledPartName\n          onClick={() => setPart(PartEnum.CHARTS)}\n          current={part === PartEnum.CHARTS}\n        >\n          Wykresy\n        </StyledPartName>\n        <StyledPartName\n          onClick={() => setPart(PartEnum.TABLE)}\n          current={part === PartEnum.TABLE}\n        >\n          Tabela\n        </StyledPartName>\n      </StyledParNameWrapper>\n      <StyledLogout>Wyloguj</StyledLogout>\n    </StyledHeader>\n  );\n};\n\nexport default Header;\n","import React, { SetStateAction, Dispatch } from \"react\";\nimport styled from \"styled-components\";\nimport { SiteEnum } from \"../App\";\n\ninterface SidebarProps {\n  site: SiteEnum;\n  setSite: Dispatch<SetStateAction<SiteEnum>>;\n}\n\nconst StyledSidebar = styled.div`\n  width: 15%;\n  min-width: 130px;\n  border-right: solid 1px #dedede;\n  height: auto;\n  @media only screen and (max-width: 800px) {\n    height: auto;\n    display: flex;\n    width: 100%;\n  }\n`;\ninterface SiteNameProps {\n  current: boolean;\n}\nconst StyledSiteName = styled.div`\n  display: flex;\n  align-items: center;\n  height: 50px;\n  padding-left: 23px;\n  border-right: ${(props: SiteNameProps) =>\n    props.current && \"3px solid #50B4C8\"};\n  background-color: ${(props: SiteNameProps) => props.current && \"#EDEDED\"};\n  cursor: ${(props: SiteNameProps) => !props.current && \"pointer\"};\n  font-weight: ${(props: SiteNameProps) => props.current && \"bold\"};\n  @media only screen and (max-width: 800px) {\n    width: 50%;\n  }\n`;\n\nconst Sidebar = (props: SidebarProps) => {\n  const { site, setSite } = props;\n\n  return (\n    <StyledSidebar>\n      <StyledSiteName\n        onClick={() => setSite(SiteEnum.A)}\n        current={site === SiteEnum.A}\n      >\n        Strona A\n      </StyledSiteName>\n      <StyledSiteName\n        onClick={() => setSite(SiteEnum.B)}\n        current={site === SiteEnum.B}\n      >\n        Strona B\n      </StyledSiteName>\n    </StyledSidebar>\n  );\n};\n\nexport default Sidebar;\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport styled from \"styled-components\";\nimport COLORS from \"../colors\";\n\ninterface ColumnChooserProps {\n  columnToShow: string;\n  setColumnToShow: Dispatch<SetStateAction<string>>;\n  columnNames: string[];\n}\n\nconst StyledColumnChooser = styled.div`\n  width: 100%;\n  height: 100px;\n  background-color: #f5f5f5;\n  border-bottom: solid 1px ${COLORS.borderGrey};\n  display: flex;\n  align-items: center;\n`;\nconst StyledSelectWrapper = styled.label`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  align-items: flex-end;\n  padding-right: 5%;\n  width: 50%;\n  height: 38px;\n  @media only screen and (max-width: 800px) {\n    margin-left: 0;\n    width: 50%;\n    line-height: auto;\n    height: 80px;\n    align-items: center;\n    justify-content: space-between;\n  }\n`;\nconst StyledSelect = styled.select`\n  width: 200px;\n  background-color: ${COLORS.white};\n  padding: 10px;\n  border-radius: 4px;\n  font-size: 14px;\n  color: #2f2f2f;\n  border: solid 1px ${COLORS.borderGrey};\n  cursor: pointer;\n  @media only screen and (max-width: 500px) {\n    width: 150px;\n  }\n  @media only screen and (max-width: 320px) {\n    width: 120px;\n  }\n`;\nconst StyledResetButtonWrapper = styled.label`\n  margin-right: 3%;\n  margin-top: 10px;\n  font-size: 14px;\n  color: #989797;\n  text-transform: uppercase;\n  font-weight: bold;\n  height: 38px;\n  display: flex;\n  width: 50%;\n  justify-content: flex-end;\n  align-items: center;\n  @media only screen and (max-width: 800px) {\n    margin: 0;\n    flex-direction: column;\n    width: 50%;\n    line-height: auto;\n    height: 80px;\n    align-items: center;\n    justify-content: space-between;\n  }\n`;\nconst StyledResetButton = styled.button`\n  width: 200px;\n  padding: 10px;\n  border-radius: 4px;\n  border: solid 1px ${COLORS.borderGrey};\n  background-color: ${COLORS.teal};\n  margin-left: 3%;\n  color: ${COLORS.white};\n  cursor: pointer;\n  @media only screen and (max-width: 500px) {\n    width: 150px;\n  }\n  @media only screen and (max-width: 320px) {\n    width: 120px;\n  }\n`;\nconst DEFAULT_COLUMN_TO_SHOW = \"all\";\n\nconst ColumnChooser = (props: ColumnChooserProps) => {\n  const { columnToShow, setColumnToShow, columnNames } = props;\n\n  const resetFilters = () => {\n    setColumnToShow(DEFAULT_COLUMN_TO_SHOW);\n  };\n\n  return (\n    <StyledColumnChooser>\n      <StyledSelectWrapper>\n        <span\n          style={{\n            fontSize: \"13px\",\n            fontWeight: \"bold\",\n            textAlign: \"center\",\n            paddingBottom: \"4px\",\n            paddingRight: \"5px\",\n          }}\n        >\n          Wybierz kolumny do wizualizacji\n        </span>\n        <StyledSelect\n          value={columnToShow}\n          onChange={(e) => setColumnToShow(e.target.value)}\n        >\n          <option value=\"all\">Wszystkie</option>\n          {columnNames.map((name, index) => (\n            <option value={`column${index}`} key={index}>\n              {name}\n            </option>\n          ))}\n        </StyledSelect>\n      </StyledSelectWrapper>\n      <StyledResetButtonWrapper>\n        <span>RESETUJ FILTRY</span>\n        <StyledResetButton onClick={() => resetFilters()}>\n          POKAŻ\n        </StyledResetButton>\n      </StyledResetButtonWrapper>\n    </StyledColumnChooser>\n  );\n};\n\nexport default ColumnChooser;\n","import React from \"react\";\nimport {\n  AreaChart,\n  Area,\n  Tooltip,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { Data } from \"./Charts\";\nimport COLORS from \"../../colors\";\nimport styled from \"styled-components\";\n\ninterface AreaChartProps {\n  data: Data[];\n}\n\nexport const StyledChartWrapper = styled.div`\n  margin: 10px;\n  width: 45%;\n  max-width: 650px;\n  height: 270px;\n  @media only screen and (max-width: 950px) {\n    width: 70%;\n  }\n  @media only screen and (max-width: 550px) {\n    width: 80%;\n  }\n  @media only screen and (max-width: 400px) {\n    width: 90%;\n    height: 240px;\n    font-size: 12px;\n  }\n  @media only screen and (max-width: 300px) {\n    width: 98%;\n    height: 220px;\n  }\n`;\n\nconst AreaChartComponent = (props: AreaChartProps) => {\n  const { data } = props;\n  return (\n    <StyledChartWrapper>\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <AreaChart\n          data={data}\n          margin={{\n            top: 30,\n            right: 30,\n            bottom: 30,\n            left: 30,\n          }}\n          style={{\n            border: `solid 1px ${COLORS.borderGrey}`,\n          }}\n        >\n          <defs>\n            <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor={COLORS.blue} stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor={COLORS.blue} stopOpacity={0} />\n            </linearGradient>\n          </defs>\n          <Area\n            type=\"monotone\"\n            dataKey=\"value\"\n            stroke=\"#54D8FF\"\n            fillOpacity={1}\n            fill=\"url(#colorUv)\"\n          />\n          <CartesianGrid stroke=\"#ccc\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n        </AreaChart>\n      </ResponsiveContainer>\n    </StyledChartWrapper>\n  );\n};\n\nexport default AreaChartComponent;\n","import React from \"react\";\nimport {\n  PieChart,\n  Pie,\n  Cell,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { Data } from \"./Charts\";\nimport COLORS from \"../../colors\";\nimport { StyledChartWrapper } from \"./AreaChart\";\n\ninterface PieChartProps {\n  data: Data[];\n}\n\nconst PieChartComponent = (props: PieChartProps) => {\n  const { data } = props;\n  const pieChartColors = [\n    COLORS.blue,\n    COLORS.red,\n    COLORS.teal,\n    COLORS.green,\n    COLORS.darkPurple,\n  ];\n\n  return (\n    <StyledChartWrapper>\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <PieChart style={{ border: `solid 1px ${COLORS.borderGrey}` }}>\n          <Pie\n            data={data}\n            dataKey=\"value\"\n            nameKey=\"name\"\n            cx=\"50%\"\n            cy=\"50%\"\n            innerRadius={50}\n            outerRadius={90}\n            fill=\"#8884d8\"\n          >\n            {data.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={pieChartColors[index]} />\n            ))}\n          </Pie>\n          <Tooltip />\n          <Legend\n            align=\"right\"\n            iconType=\"circle\"\n            layout=\"vertical\"\n            verticalAlign=\"middle\"\n          />\n        </PieChart>\n      </ResponsiveContainer>\n    </StyledChartWrapper>\n  );\n};\n\nexport default PieChartComponent;\n","import React, { useRef, useEffect } from \"react\";\nimport { PartEnum } from \"../../App\";\nimport MaterialTable from \"material-table\";\nimport COLORS from \"../../colors\";\nimport styled from \"styled-components\";\n\ninterface TableProps {\n  part: PartEnum;\n  data: any;\n  columns: { title: string; field: string }[];\n}\n\nconst StyledTableWrapper = styled.div`\n  width: 650;\n  margin-bottom: 20;\n  fontsize: 12px;\n  height: 500px;\n  @media only screen and (max-width: 950px) {\n    width: 70%;\n  }\n  @media only screen and (max-width: 700px) {\n    width: 80%;\n  }\n  @media only screen and (max-width: 600px) {\n    width: 90%;\n  }\n  @media only screen and (max-width: 500px) {\n    width: 98%;\n  }\n`;\n\nconst Table = (props: TableProps) => {\n  const { part, data, columns } = props;\n  const tableRef = useRef<any>();\n\n  useEffect(() => {\n    if (part === PartEnum.TABLE && tableRef.current) {\n      tableRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [part]);\n\n  return (\n    <StyledTableWrapper ref={tableRef}>\n      <MaterialTable\n        columns={columns}\n        style={{ width: \"100%\" }}\n        data={data}\n        options={{\n          rowStyle: {\n            fontSize: 12,\n          },\n          search: false,\n          showTitle: false,\n          toolbar: false,\n          headerStyle: {\n            backgroundColor: COLORS.lightestBackgroundGrey,\n          },\n        }}\n      />\n    </StyledTableWrapper>\n  );\n};\n\nexport default Table;\n","import React, { useState, useEffect, Dispatch, SetStateAction } from \"react\";\nimport styled from \"styled-components\";\nimport AreaChartComponent from \"./AreaChart\";\nimport PieChartComponent from \"./PieChart\";\nimport { CSVDataA, CSVDataB } from \"../../data/CSVdata\";\nimport Papa from \"papaparse\";\nimport { SiteEnum, PartEnum, ALL_COLUMNS } from \"../../App\";\nimport Table from \"./Table\";\n\ninterface ChartsProps {\n  site: SiteEnum;\n  part: PartEnum;\n  columnToShow: string;\n  setColumnNames: Dispatch<SetStateAction<string[]>>;\n}\nexport interface Data {\n  name: string;\n  value: number;\n}\nexport interface ChartData {\n  chartTitle: string;\n  chartData: Data[];\n}\ninterface DataElement {\n  [key: string]: string;\n}\nexport interface TableColumn {\n  title: string;\n  field: string;\n}\nconst StyledCharts = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  padding: 5%;\n  @media only screen and (max-width: 1200px) {\n    padding: 10px;\n  }\n`;\nconst StyledChartAndTitleWrapper = styled.div`\n  text-align: center;\n  margin-bottom: 50px;\n  width: 100%;\n`;\nconst StyledChartTitle = styled.p`\n  font-weight: bold;\n`;\nconst StyledTwoChartsWrapper = styled.div`\n  display: flex;\n  justify-content: space-around;\n  width: 100%;\n  align-items: center;\n  height: auto;\n  @media only screen and (max-width: 950px) {\n    flex-direction: column;\n    justify-content: space-around;\n  }\n`;\n\nconst Charts = (props: ChartsProps) => {\n  const { site, part, columnToShow, setColumnNames } = props;\n  const [data, setData] = useState<any>([]);\n  const [CSVdata, setCSVData] = useState<any>(null);\n  const [tableColumns, setTableColumns] = useState<TableColumn[]>([]);\n  const [allChartsData, setAllChartsData] = useState<ChartData[]>([]);\n\n  const convertToChartData = (element: DataElement) => {\n    let chartData: Data[] = [];\n    let columnName = \"\";\n    Object.keys(element).forEach((key: string, index: number) => {\n      if (key !== \"tableData\")\n        if (index === 0) {\n          columnName = element[key];\n        } else {\n          chartData.push({\n            name: key,\n            value:\n              typeof element[key] === \"string\"\n                ? Number(element[key].replace(/,/g, \".\"))\n                : 0,\n          });\n        }\n    });\n    return { columnName, chartData };\n  };\n\n  useEffect(() => {\n    setCSVData(site === SiteEnum.A ? CSVDataA : CSVDataB);\n  }, [site]);\n\n  useEffect(() => {\n    if (CSVdata) {\n      setData(\n        Papa.parse<any>(CSVdata, {\n          header: true,\n        }).data\n      );\n      setTableColumns(\n        Papa.parse<any>(CSVdata, {\n          header: false,\n        }).data[0].map((element: string) => ({\n          title: element,\n          field: element,\n        }))\n      );\n    }\n  }, [CSVdata]);\n\n  useEffect(() => {\n    const convertedData = data.map((element: DataElement) => {\n      const { columnName, chartData } = convertToChartData(element);\n      return { chartTitle: columnName, chartData };\n    });\n    setAllChartsData(convertedData);\n  }, [data]);\n\n  useEffect(() => {\n    setColumnNames(allChartsData.map((element) => element.chartTitle));\n  }, [allChartsData, setColumnNames]);\n\n  return (\n    <StyledCharts>\n      {allChartsData.map((chart, index) => {\n        if (columnToShow === ALL_COLUMNS || columnToShow === `column${index}`) {\n          return (\n            <StyledChartAndTitleWrapper key={index}>\n              <StyledChartTitle>{chart.chartTitle}</StyledChartTitle>\n              <StyledTwoChartsWrapper>\n                <AreaChartComponent data={chart.chartData} />\n                <PieChartComponent data={chart.chartData} />\n              </StyledTwoChartsWrapper>\n            </StyledChartAndTitleWrapper>\n          );\n        } else {\n          return undefined;\n        }\n      })}\n      <Table part={part} data={data} columns={tableColumns} />\n    </StyledCharts>\n  );\n};\n\nexport default Charts;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport Header from \"./components/Header\";\nimport Sidebar from \"./components/Sidebar\";\nimport ColumnChooser from \"./components/ColumnChooser\";\nimport Charts from \"./components/charts/Charts\";\nimport COLORS from \"./colors\";\n\nexport enum SiteEnum {\n  A = \"A\",\n  B = \"B\",\n}\nexport enum PartEnum {\n  CHARTS = \"Wykresy\",\n  TABLE = \"Tabela\",\n}\n\nexport const ALL_COLUMNS = \"all\";\n\nconst StyledApp = styled.div`\n  background-color: ${COLORS.white};\n  color: #2f2f2f;\n  font-size: 15px;\n  border-sizing: border-box;\n  height: ${window.innerHeight}px;\n  font-family: \"Lato\", sans-serif;\n`;\nconst StyledSidebarAndContentWrapper = styled.div`\n  display: flex;\n  width: 100%;\n  @media only screen and (max-width: 800px) {\n    flex-direction: column;\n  }\n`;\nconst StyledContentWrapper = styled.div`\n  width: 85%;\n  @media only screen and (max-width: 800px) {\n    width: 100%;\n  }\n`;\n\nfunction App() {\n  const [site, setSite] = useState(SiteEnum.A);\n  const [part, setPart] = useState(PartEnum.CHARTS);\n  const [columnToShow, setColumnToShow] = useState(ALL_COLUMNS);\n  const [columnNames, setColumnNames] = useState<string[]>([]);\n\n  // Change selected part to 'Wykresy' when on the top of the page\n\n  useEffect(() => {\n    const handleScroll = (e: any) => {\n      if (window.pageYOffset === 0) {\n        setPart(PartEnum.CHARTS);\n      }\n    };\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  return (\n    <StyledApp>\n      <Header part={part} setPart={setPart} />\n      <StyledSidebarAndContentWrapper>\n        <Sidebar site={site} setSite={setSite} />\n        <StyledContentWrapper>\n          <ColumnChooser\n            columnToShow={columnToShow}\n            setColumnToShow={setColumnToShow}\n            columnNames={columnNames}\n          />\n          <Charts\n            site={site}\n            part={part}\n            columnToShow={columnToShow}\n            setColumnNames={setColumnNames}\n          />\n        </StyledContentWrapper>\n      </StyledSidebarAndContentWrapper>\n    </StyledApp>\n  );\n}\n\nexport default App;\n","export const CSVDataA = `X;Y1;Y2;Y3;Y4;Y5\nstyczeń;0,999275846;3100,35888;0,059087424;274719,1178;0,004153475\nluty;0,824858801;5356,141055;0,102078691;219062,1757;0,006762655\nmarzec;0,304004652;891,8945225;0,016997951;491645,4205;0,004670127\nkwiecień;0,921498027;937,6290834;0,017869572;409905,1411;0,000255832\nmaj;0,776070889;3903,300529;0,074390089;86539,2909;0,008276929\nczerwiec;0,523913776;3835,437046;0,073096729;464659,3977;0,004474329\nlipiec;0,906331608;5463,021846;0,104115652;998741,6458;0,003858839\nsierpień;0,417367291;2695,071728;0,051363359;977408,8111;0,005750201\nwrzesień;0,723426979;8858,804128;0,16883333;859686,08;0,003728438\npaździernik;0,477686748;8726,563793;0,16631306;950088,1717;0,005984764\nlistopad;0,652762058;3969,335795;0,075648606;32523,28129;0,008697549\ngrudzień;0,090059638;4733,148263;0,090205537;616583,0898;0,002433191`;\n\nexport const CSVDataB = `X;Y1;Y2;Y3;Y4;Y5\nstycze�;0,101398943;-1;0,099426123;516383,0717;0,007385688\nluty;0,560971716;2174,754765;0,032624753;89635,68617;0,006365482\nmarzec;0,796895637;5278,080299;0,079179534;473160,6178;0,009987504\nkwiecie�;0,516013979;8456,883149;0,126866593;851178,8075;0,003487903\nmaj;0,887847898;7891,878878;\"\"\"\"\"\";849132,2046;0,002918772\nczerwiec;0,210736726;2589,239035;0,038842672;463653,3824;0,002010272\nlipiec;0,313857114;7177,494568;0,107673745;101390,6355;0,005395998\nsierpie�;0,397081838;;0,130577443;337087,3875;0,009798332\nwrzesie�;0,054454566;2337,592646;0,035067579;107153,9714;0,002433083\npa�dziernik;0,225709082;9209,182704;0,138152274;420915,5313;0,007258331\nlistopad;0,394475247;2407,643804;0,036118457;808026,0632;0,003465\ngrudzie�;0,820427406;NULL;0,057080191;190024,8076;0,008796844`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}